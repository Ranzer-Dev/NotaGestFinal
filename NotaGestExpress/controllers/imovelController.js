// controllers/imovelController.js
const Imovel = require('../models/imovelModel');

// @desc    Buscar todos os im√≥veis do usu√°rio
// @route   GET /api/imoveis
// @access  Private
exports.getImoveis = async (req, res) => {
    try {
        // req.user.id vem do middleware 'protect'
        const imoveis = await Imovel.find({ user: req.user.id }).sort({ nome: 1 });
        res.status(200).json(imoveis);
    } catch (error) {
        res.status(500).json({ message: 'Erro no servidor ao buscar im√≥veis', error: error.message });
    }
};

// @desc    Criar um novo im√≥vel
// @route   POST /api/imoveis
// @access  Private
exports.createImovel = async (req, res) => {
    console.log('üèÅüèÅüèÅ Entrou na fun√ß√£o createImovel! üèÅüèÅüèÅ'); 
    console.log('‚û°Ô∏è Requisi√ß√£o POST /api/imoveis recebida com dados:', req.body); 

    try {
        const { nome, cep, rua, numero, bairro, cidade, estado, tipo } = req.body;

        if (!nome) {
            console.error('‚ùå Erro 400: Campo "nome" faltando.');
            return res.status(400).json({ message: 'O campo "nome" √© obrigat√≥rio.' });
        }

        const novoImovel = await Imovel.create({
            nome, cep, rua, numero, bairro, cidade, estado, tipo,
            user: req.user.id
        });

        console.log('‚úÖ Im√≥vel criado com sucesso:', novoImovel);
        res.status(201).json(novoImovel);

    } catch (error) {
        // üëá LOG DETALHADO AQUI üëá
        console.error('‚ùå ERRO 400 NO CONTROLLER createImovel:');
        
        // Verifica se √© um erro de valida√ß√£o do Mongoose
        if (error.name === 'ValidationError') {
            console.error('   Tipo de Erro: Valida√ß√£o do Mongoose');
            // Mongoose coloca os detalhes dos campos inv√°lidos em error.errors
            const errors = Object.values(error.errors).map(el => ({
                campo: el.path,
                mensagem: el.message
            }));
            console.error('   Detalhes dos Campos Inv√°lidos:', errors);
            
            // Retorna uma mensagem mais espec√≠fica
            return res.status(400).json({ 
                message: 'Dados inv√°lidos ao criar im√≥vel. Verifique os campos.', 
                validationErrors: errors // Envia os detalhes para o frontend
            });
        } 
        // Verifica se √© um erro de "Cast" (ex: ID do usu√°rio mal formatado)
        else if (error.name === 'CastError') {
             console.error('   Tipo de Erro: Erro de Cast (convers√£o de tipo)');
             console.error(`   Campo: ${error.path}, Valor: ${error.value}`);
             return res.status(400).json({
                 message: `Erro ao converter valor para o campo '${error.path}'. Verifique o formato.`,
                 errorDetails: error.message
             });
        } 
        // Outros tipos de erro (inesperados)
        else {
            console.error('   Tipo de Erro: Desconhecido/Outro');
            console.error('   Mensagem:', error.message);
            console.error('   Stack:', error.stack); // Mostra a pilha de chamadas
             return res.status(500).json({ 
                message: 'Erro interno no servidor ao criar im√≥vel.', 
                errorDetails: error.message 
            });
        }
    }
};

// @desc    Deletar um im√≥vel
// @route   DELETE /api/imoveis/:id
// @access  Private
exports.deleteImovel = async (req, res) => {
    try {
        const imovel = await Imovel.findById(req.params.id);

        if (!imovel) {
            return res.status(404).json({ message: 'Im√≥vel n√£o encontrado.' });
        }

        // VERIFICA√á√ÉO: Garante que o usu√°rio s√≥ pode deletar seus pr√≥prios im√≥veis
        if (imovel.user.toString() !== req.user.id) {
            return res.status(403).json({ message: 'A√ß√£o n√£o autorizada.' }); // 403 Forbidden
        }

        await imovel.deleteOne();

        res.status(200).json({ id: req.params.id, message: 'Im√≥vel removido com sucesso.' });
    } catch (error) {
        console.error("ERRO NO CONTROLLER deleteImovel:", error);
        res.status(500).json({ message: 'Erro no servidor ao deletar im√≥vel.', error: error.message });
    }
};